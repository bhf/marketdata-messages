/*
package com.bht.md.handlers;


import com.bht.md.messages.*;
import org.agrona.DirectBuffer;
import org.jl.perftools.likwid.ILikwidMarker;


*/
/** Autogenerated from SBE messages xml *//*


                                          public abstract class AbstractMarkedSBEDecodingHandler implements SBEDecodingHandler {

                                              MessageHeaderDecoder headerDecoder = new MessageHeaderDecoder();

                                              ILikwidMarker marker;

                                              public void setMarker(ILikwidMarker marker) {
                                                  this.marker = marker;
                                              }

                                              private final SingleSidedQuoteDecoder msgDecoderSingleSidedQuote = new SingleSidedQuoteDecoder();

                                              private final TwoSidedQuoteDecoder msgDecoderTwoSidedQuote = new TwoSidedQuoteDecoder();

                                              private final MassBidsUpdateDecoder msgDecoderMassBidsUpdate = new MassBidsUpdateDecoder();

                                              private final MassAsksUpdateDecoder msgDecoderMassAsksUpdate = new MassAsksUpdateDecoder();

                                              private final MassSidedUpdateDecoder msgDecoderMassSidedUpdate = new MassSidedUpdateDecoder();

                                              private final GroupedSidedUpdateDecoder msgDecoderGroupedSidedUpdate = new GroupedSidedUpdateDecoder();

                                              private final MultiSymbolMassBidsUpdateDecoder msgDecoderMultiSymbolMassBidsUpdate = new MultiSymbolMassBidsUpdateDecoder();

                                              private final MultiSymbolMassAsksUpdateDecoder msgDecoderMultiSymbolMassAsksUpdate = new MultiSymbolMassAsksUpdateDecoder();

                                              private final MultiSymbolMassSidedUpdateDecoder msgDecoderMultiSymbolMassSidedUpdate = new MultiSymbolMassSidedUpdateDecoder();

                                              private final MarketStateDecoder msgDecoderMarketState = new MarketStateDecoder();

                                              @Override
                                              public void decode(DirectBuffer buffer, int offset, int length) {

                                                  headerDecoder.wrap(buffer, offset);
                                                  int blockLen = headerDecoder.blockLength();
                                                  int tid = headerDecoder.templateId();
                                                  int schemaID = headerDecoder.schemaId();
                                                  int version = headerDecoder.version();
                                                  int encLen = headerDecoder.encodedLength();

                                                  if (isValid(tid, schemaID, version)) {
                                                      if (tid == SingleSidedQuoteEncoder.TEMPLATE_ID) {
                                                          handleSingleSidedQuote(buffer, offset);
                                                      } else if (tid == TwoSidedQuoteEncoder.TEMPLATE_ID) {
                                                          handleTwoSidedQuote(buffer, offset);
                                                      } else if (tid == MassBidsUpdateEncoder.TEMPLATE_ID) {
                                                          handleMassBidsUpdate(buffer, offset);
                                                      } else if (tid == MassAsksUpdateEncoder.TEMPLATE_ID) {
                                                          handleMassAsksUpdate(buffer, offset);
                                                      } else if (tid == MassSidedUpdateEncoder.TEMPLATE_ID) {
                                                          handleMassSidedUpdate(buffer, offset);
                                                      } else if (tid == GroupedSidedUpdateEncoder.TEMPLATE_ID) {
                                                          handleGroupedSidedUpdate(buffer, offset);
                                                      } else if (tid == MultiSymbolMassBidsUpdateEncoder.TEMPLATE_ID) {
                                                          handleMultiSymbolMassBidsUpdate(buffer, offset);
                                                      } else if (tid == MultiSymbolMassAsksUpdateEncoder.TEMPLATE_ID) {
                                                          handleMultiSymbolMassAsksUpdate(buffer, offset);
                                                      } else if (tid == MultiSymbolMassSidedUpdateEncoder.TEMPLATE_ID) {
                                                          handleMultiSymbolMassSidedUpdate(buffer, offset);
                                                      } else if (tid == MarketStateEncoder.TEMPLATE_ID) {
                                                          handleMarketState(buffer, offset);
                                                      }

                                                  }

                                              }

                                              protected abstract boolean isValid(int tid, int schemaID, int version);

                                              private void handleSingleSidedQuote(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_SingleSidedQuote");
                                                  msgDecoderSingleSidedQuote.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleSingleSidedQuote(msgDecoderSingleSidedQuote);
                                                  marker.stop("marker_SingleSidedQuote");

                                              }

                                              public abstract void handleSingleSidedQuote(SingleSidedQuoteDecoder msgDecoder);


                                              private void handleTwoSidedQuote(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_TwoSidedQuote");
                                                  msgDecoderTwoSidedQuote.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleTwoSidedQuote(msgDecoderTwoSidedQuote);
                                                  marker.stop("marker_TwoSidedQuote");

                                              }

                                              public abstract void handleTwoSidedQuote(TwoSidedQuoteDecoder msgDecoder);


                                              private void handleMassBidsUpdate(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_MassBidsUpdate");
                                                  msgDecoderMassBidsUpdate.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleMassBidsUpdate(msgDecoderMassBidsUpdate);
                                                  marker.stop("marker_MassBidsUpdate");

                                              }

                                              public abstract void handleMassBidsUpdate(MassBidsUpdateDecoder msgDecoder);


                                              private void handleMassAsksUpdate(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_MassAsksUpdate");
                                                  msgDecoderMassAsksUpdate.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleMassAsksUpdate(msgDecoderMassAsksUpdate);
                                                  marker.stop("marker_MassAsksUpdate");

                                              }

                                              public abstract void handleMassAsksUpdate(MassAsksUpdateDecoder msgDecoder);


                                              private void handleMassSidedUpdate(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_MassSidedUpdate");
                                                  msgDecoderMassSidedUpdate.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleMassSidedUpdate(msgDecoderMassSidedUpdate);
                                                  marker.stop("marker_MassSidedUpdate");

                                              }

                                              public abstract void handleMassSidedUpdate(MassSidedUpdateDecoder msgDecoder);


                                              private void handleGroupedSidedUpdate(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_GroupedSidedUpdate");
                                                  msgDecoderGroupedSidedUpdate.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleGroupedSidedUpdate(msgDecoderGroupedSidedUpdate);
                                                  marker.stop("marker_GroupedSidedUpdate");

                                              }

                                              public abstract void handleGroupedSidedUpdate(GroupedSidedUpdateDecoder msgDecoder);


                                              private void handleMultiSymbolMassBidsUpdate(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_MultiSymbolMassBidsUpdate");
                                                  msgDecoderMultiSymbolMassBidsUpdate.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleMultiSymbolMassBidsUpdate(msgDecoderMultiSymbolMassBidsUpdate);
                                                  marker.stop("marker_MultiSymbolMassBidsUpdate");

                                              }

                                              public abstract void handleMultiSymbolMassBidsUpdate(MultiSymbolMassBidsUpdateDecoder msgDecoder);


                                              private void handleMultiSymbolMassAsksUpdate(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_MultiSymbolMassAsksUpdate");
                                                  msgDecoderMultiSymbolMassAsksUpdate.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleMultiSymbolMassAsksUpdate(msgDecoderMultiSymbolMassAsksUpdate);
                                                  marker.stop("marker_MultiSymbolMassAsksUpdate");

                                              }

                                              public abstract void handleMultiSymbolMassAsksUpdate(MultiSymbolMassAsksUpdateDecoder msgDecoder);


                                              private void handleMultiSymbolMassSidedUpdate(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_MultiSymbolMassSidedUpdate");
                                                  msgDecoderMultiSymbolMassSidedUpdate.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleMultiSymbolMassSidedUpdate(msgDecoderMultiSymbolMassSidedUpdate);
                                                  marker.stop("marker_MultiSymbolMassSidedUpdate");

                                              }

                                              public abstract void handleMultiSymbolMassSidedUpdate(MultiSymbolMassSidedUpdateDecoder msgDecoder);


                                              private void handleMarketState(DirectBuffer buffer, int offset) {
                                                  marker.start("marker_MarketState");
                                                  msgDecoderMarketState.wrapAndApplyHeader(buffer, offset, headerDecoder);
                                                  handleMarketState(msgDecoderMarketState);
                                                  marker.stop("marker_MarketState");

                                              }

                                              public abstract void handleMarketState(MarketStateDecoder msgDecoder);


                                          }


                                          */
